@model InterventionWebSite.Models.ViewModel

@{
    ViewBag.Title = "Tableau de bord";
}

@{ var count1 = 0;
    var count2 = 0;
    var count3 = 0;
    var count4 = 0;
    var k1 = 0;
    var k2 = 0;
    var k3 = 0;
    var k4 = 0;
    var k5 = 0;
    var k6 = 0;
    var k7 = 0;
    var b1 = 0;
    var b2 = 0;
    var b3 = 0;
    var b4 = 0;
    var b5 = 0;
    var b6 = 0;
    var b7 = 0;
    var c1 = 0;
    var c2 = 0;
    var c3 = 0;
}
@{
    var m1 = DateTime.Now.ToString("MMMM");
    var m2 = DateTime.Now.AddMonths(-1).ToString("MMMM");
    var m3 = DateTime.Now.AddMonths(-2).ToString("MMMM");
    var m4 = DateTime.Now.AddMonths(-3).ToString("MMMM");
    var m5 = DateTime.Now.AddMonths(-4).ToString("MMMM");
    var m6 = DateTime.Now.AddMonths(-5).ToString("MMMM");
    var m7 = DateTime.Now.AddMonths(-6).ToString("MMMM");

}
@foreach (var item in Model.InterventionsTable)
{
    if (item.State.StateName == "A affecter")
    {
        count1++;
    }
    else if (item.State.StateName == "En cours")
    {
        count2++;
    }
    else if (item.State.StateName == "Cloturee")
    {
        count3++;
    }
    if (item.ActionDate != null)
    {
        if (item.ActionDate.Value.ToString("MMMM").Equals(m1)) { k1++; }
        if (item.ActionDate.Value.ToString("MMMM").Equals(m2)) { k2++; }
        if (item.ActionDate.Value.ToString("MMMM").Equals(m3)) { k3++; }
        if (item.ActionDate.Value.ToString("MMMM").Equals(m4)) { k4++; }
        if (item.ActionDate.Value.ToString("MMMM").Equals(m5)) { k5++; }
        if (item.ActionDate.Value.ToString("MMMM").Equals(m6)) { k6++; }
        if (item.ActionDate.Value.ToString("MMMM").Equals(m7)) { k7++; }
    }
}
@foreach (var item in Model.RequestsTable)
{
    count4++;
    if (item.RequestDate.Value.ToString("MMMM").Equals(m1)) { b1++; }
    if (item.RequestDate.Value.ToString("MMMM").Equals(m2)) { b2++; }
    if (item.RequestDate.Value.ToString("MMMM").Equals(m3)) { b3++; }
    if (item.RequestDate.Value.ToString("MMMM").Equals(m4)) { b4++; }
    if (item.RequestDate.Value.ToString("MMMM").Equals(m5)) { b5++; }
    if (item.RequestDate.Value.ToString("MMMM").Equals(m6)) { b6++; }
    if (item.RequestDate.Value.ToString("MMMM").Equals(m7)) { b7++; }

    if(item.TypeOfCommunication == "Email") { c1++; }
    if(item.TypeOfCommunication == "Téléphone") { c2++; }
    if(item.TypeOfCommunication == "Directe") { c3++; }
}



<div class="row">
    <div class="col-lg-3 col-xs-6">
        <!-- small box -->
        <div class="small-box bg-red">
            <div class="inner">
                <h3>@count1</h3>

                <p>Interventions à affecter</p>
            </div>
            <div class="icon">
                <i class="ion ion-pie-graph"></i>
            </div>
            <a href="~/Interventions/Index" class="small-box-footer">Plus d'info <i class="fa fa-arrow-circle-right"></i></a>
        </div>
    </div>
    <!-- ./col -->
    <div class="col-lg-3 col-xs-6">
        <!-- small box -->
        <div class="small-box bg-aqua">
            <div class="inner">
                <h3>@count2</h3>

                <p>Interventions en cours de traitement</p>
            </div>
            <div class="icon">
                <i class="ion ion-pie-graph"></i>
            </div>
            <a href="~/Interventions/Index" class="small-box-footer">Plus d'info <i class="fa fa-arrow-circle-right"></i></a>
        </div>
    </div>
    <!-- ./col -->
    <div class="col-lg-3 col-xs-6">
        <!-- small box -->
        <div class="small-box bg-green">
            <div class="inner">
                <h3>@count3</h3>

                <p>Interventions cloturées</p>
            </div>
            <div class="icon">
                <i class="ion ion-pie-graph"></i>
            </div>
            <a href="~/Interventions/Index" class="small-box-footer">Plus d'info <i class="fa fa-arrow-circle-right"></i></a>
        </div>
    </div>
    <!-- ./col -->
    <div class="col-lg-3 col-xs-6">
        <!-- small box -->
        <div class="small-box bg-yellow">
            <div class="inner">
                <h3>@count4</h3>
                <p>Demandes</p>
            </div>
            <div class="icon">
                <i class="ion ion-pie-graph"></i>
            </div>
            <a href="~/Requests/Index" class="small-box-footer">Plus d'info <i class="fa fa-arrow-circle-right"></i></a>
        </div>
    </div>
    <!-- ./col -->
</div>
<br />

<div class="row">
    <div class="col-lg-8">
        <div class="box box-danger">
            <div class="box-header with-border">
                <i class="fa fa-bar-chart-o"></i>
                <h3 class="box-title">Graphe des interventions et de demandes (selon les 7 derniers mois)</h3>

                <div class="box-tools pull-right">
                    <button type="button" class="btn btn-box-tool" data-widget="collapse">
                        <i class="fa fa-minus"></i>
                    </button>
                </div>
            </div>
            <div class="box-body chart-responsive">
                <div class="chart" id="bar-chart" style="height: 300px;"></div>
            </div>
        </div>
    </div>
    <div class="col-lg-4">
        <div class="box box-danger">
            <div class="box-header with-border">
                <i class="fa fa-bar-chart-o"></i>
                <h3 class="box-title">Types de communication (Demandes)</h3>

                <div class="box-tools pull-right">
                    <button type="button" class="btn btn-box-tool" data-widget="collapse">
                        <i class="fa fa-minus"></i>
                    </button>
                </div>
            </div>
            <div class="box-body">
                <br />
                <canvas id="pieChart" style="height:400px"></canvas>
            </div><br />
        </div>
    </div>
</div>


<script src="../../Content/assets3/bower_components/jquery/dist/jquery.min.js"></script>
<!-- Morris.js charts -->
<script src="../../Content/assets3/bower_components/raphael/raphael.min.js"></script>
<script src="../../Content/assets3/bower_components/morris.js/morris.min.js"></script>
<script src="../../Content/assets3/bower_components/chart.js/Chart.js"></script>


<script>
    $(function () {
        "use strict";
        //BAR CHART
        var bar = new Morris.Bar({
            element: 'bar-chart',
            resize: true,
            data: [
                { y: @Html.Raw(Json.Encode(m7)) , a: @k7, b: @b7 },
                { y: @Html.Raw(Json.Encode(m6)) , a: @k6, b: @b6 },
                { y: @Html.Raw(Json.Encode(m5)) , a: @k5, b: @b5 },
                { y: @Html.Raw(Json.Encode(m4)) , a: @k4, b: @b4 },
                { y: @Html.Raw(Json.Encode(m3)), a: @k3, b: @b3 },
                { y: @Html.Raw(Json.Encode(m2)), a: @k2, b: @b2 },
                { y: @Html.Raw(Json.Encode(m1)) , a: @k1, b: @b1 }
            ],
            barColors: ['#3f3f3f', '#e62c1d'],
            xkey: 'y',
            ykeys: ['a', 'b'],
            labels: ['Interventions', 'Requests'],
            hideHover: 'auto'
        });

        var pieChartCanvas = $('#pieChart').get(0).getContext('2d')
        var pieChart = new Chart(pieChartCanvas)
        var PieData = [
            {
                value: @c3,
                color: '#f56954',
                highlight: '#f56954',
                label: 'Directe'
            },
            {
                value: @c2,
                color: '#3c8dbc',
                highlight: '#3c8dbc',
                label: 'Par téléphone'
            },
            {
                value: @c1,
                color: '#3f3f3f',
                highlight: '#3f3f3f',
                label: 'par mail'
            }
        ]
        var pieOptions = {
            //Boolean - Whether we should show a stroke on each segment
            segmentShowStroke: true,
            //String - The colour of each segment stroke
            segmentStrokeColor: '#fff',
            //Number - The width of each segment stroke
            segmentStrokeWidth: 2,
            //Number - The percentage of the chart that we cut out of the middle
            percentageInnerCutout: 50, // This is 0 for Pie charts
            //Number - Amount of animation steps
            animationSteps: 100,
            //String - Animation easing effect
            animationEasing: 'easeOutBounce',
            //Boolean - Whether we animate the rotation of the Doughnut
            animateRotate: true,
            //Boolean - Whether we animate scaling the Doughnut from the centre
            animateScale: false,
            //Boolean - whether to make the chart responsive to window resizing
            responsive: true,
            // Boolean - whether to maintain the starting aspect ratio or not when responsive, if set to false, will take up entire container
            maintainAspectRatio: true,
            //String - A legend template
            legendTemplate: '<ul class="<%=name.toLowerCase()%>-legend"><% for (var i=0; i<segments.length; i++){%><li><span style="background-color:<%=segments[i].fillColor%>"></span><%if(segments[i].label){%><%=segments[i].label%><%}%></li><%}%></ul>'
        }
        pieChart.Doughnut(PieData, pieOptions)

        //-------------
        //- BAR CHART -
        //-------------
        var barChartCanvas = $('#barChart').get(0).getContext('2d')
        var barChart = new Chart(barChartCanvas)
        var barChartData = areaChartData
        barChartData.datasets[1].fillColor = '#00a65a'
        barChartData.datasets[1].strokeColor = '#00a65a'
        barChartData.datasets[1].pointColor = '#00a65a'
        var barChartOptions = {
            //Boolean - Whether the scale should start at zero, or an order of magnitude down from the lowest value
            scaleBeginAtZero: true,
            //Boolean - Whether grid lines are shown across the chart
            scaleShowGridLines: true,
            //String - Colour of the grid lines
            scaleGridLineColor: 'rgba(0,0,0,.05)',
            //Number - Width of the grid lines
            scaleGridLineWidth: 1,
            //Boolean - Whether to show horizontal lines (except X axis)
            scaleShowHorizontalLines: true,
            //Boolean - Whether to show vertical lines (except Y axis)
            scaleShowVerticalLines: true,
            //Boolean - If there is a stroke on each bar
            barShowStroke: true,
            //Number - Pixel width of the bar stroke
            barStrokeWidth: 2,
            //Number - Spacing between each of the X value sets
            barValueSpacing: 5,
            //Number - Spacing between data sets within X values
            barDatasetSpacing: 1,
            //String - A legend template
            legendTemplate: '<ul class="<%=name.toLowerCase()%>-legend"><% for (var i=0; i<datasets.length; i++){%><li><span style="background-color:<%=datasets[i].fillColor%>"></span><%if(datasets[i].label){%><%=datasets[i].label%><%}%></li><%}%></ul>',
            //Boolean - whether to make the chart responsive
            responsive: true,
            maintainAspectRatio: true
        }

        barChartOptions.datasetFill = false
        barChart.Bar(barChartData, barChartOptions)
    });


</script>